#!/usr/bin/perl
use strict;
use 5.014;
use utf8;
use feature 'unicode_strings';
use DBI;
binmode STDOUT, ':encoding(UTF-8)';

my %colors = (
20060 => '#9ca741',
7389 => '#df242e',
14327 => '#df1f2c',
18697 => '#3c82c2',
11596 => '#824b6f',
7921 => '#0c76bc',
8639 => '#3c82c2',
7922 => '#e4212b',
15610 => '#eeb67e',
10688 => '#e2e1e2',
5559 => '#367fc1',
12620 => '#d49e63',
2100 => '#3c82c2',
11072 => '#da251d',
17155 => '#ffe600',
5164 => '#df212c',
2 => '#009541',
6029 => '#7fadd7',
21197 => '#3a82c2',
13360 => '#ff0000',
10307 => '#3c82c2',
18695 => '#df212c',
18693 => '#9c5f1f',
1390 => '#6c5e89',
1852 => '#027bb8',
1389 => '#3a82c2',
17529 => '#ff0000',
878 => '#f8e73d',
21971 => '#3c82c2',
18696 => '#d40028',
18698 => '#f8e73d',
13006 => '#0094de',
10351 => '#ff0000',
18075 => '#3d82c2',
15171 => '#2aa5e0',
10477 => '#f7e336',
5558 => '#3c82c2',
8640 => '#3c82c2',
14543 => '#a04e26',
392 => '#3d82c2',
13896 => '#de212b',
20059 => '#71864c',
10979 => '#41a147',
2712 => '#f8e73d',
504 => '#9ab9d5',
2202 => '#f8e73d',
775 => '#1eb1dd',
20336 => '#817801',
2200 => '#0065b3',
16482 => '#391d23',
10686 => '#75a6d4',
22279 => '#ffe600',
7054 => '#5a9844',
23367 => '#3c82c2',
14696 => '#0493dd',
9829 => '#006bff',
8835 => '#fcdb00',
9719 => '#dd232d',
11197 => '#39a44e',
3 => '#df212c',
14844 => '#ead301',
3968 => '#693f2b',
3335 => '#f8e335',
991 => '#df212c',
2197 => '#b99b76',
4328 => '#3c82c2',
19219 => '#ce2123',
18699 => '#cacaca',
5016 => '#3a88cd',
14171 => '#ed2124',
12622 => '#adadad',
9720 => '#3d82c2',
9494 => '#da251d',
23276 => '#ce2123',
9402 => '#00a13a',
676 => '#e6e8e9',
541 => '#7faccc',
393 => '#9bbfd2',
23773 => '#2d73b2',
23568 => '#bb7b35',
22396 => '#f8c300',
20644 => '#2d73b2',
19651 => '#db291d',
18694 => '#b6231c',
18487 => '#858d8c',
18231 => '#da251d',
17914 => '#8b7668',
16880 => '#4c8fc8',
16756 => '#da251d',
1595 => '#0071b8',
15611 => '#011007',
1471 => '#da251d',
1226 => '#fcdb00',
10877 => '#da251d',
1 => '#467ca7',
2098 => '#1f1a17',
990 => '#2d73b2',
9561 => '#2a2128',
18399 => '#2d73b2',
15985 => '#de212b',
19000 => '#da882f',
879 => '#2d73b2',
15609 => '#538cad',
20877 => '#3c82c2',
12088 => '#8db6db',
13897 => '#007bc4',
2199 => '#6060ff',
17003 => '#3a82c2',
20548 => '#feed01',
2198 => '#ffcb05',
9079 => '#da251d',
22914 => '#3c82c2',
4743 => '#41a147',
);
my $dbh = DBI->connect("dbi:SQLite:/var/www/toptopos/top.db","","", {sqlite_unicode => 1,  AutoCommit => 1}) or die "Could not connect";

my $sth = eval { $dbh->prepare("SELECT id, name_ru, name_be, lat, lon, county FROM beltop where lat is not null") } || return undef;
$sth->execute;
my $ref = $sth->fetchall_hashref('id');

foreach my $id (keys %colors) {
	my $img = '../cities/coat/'.$id;
	my $ext = (-e $img.".svg") ? ".svg" : ".png";
	say '<li>
			<div class="front" style="background: '.$colors{$id}.'">
				<i class="fa"></i>
			</div>
			<div class="back">			
			
				<img src="/coat/'.$id.$ext.'" style="height:200px;" title="'.$ref->{$id}{name_be}.'"/>
			</div>
		</li>';
	
}